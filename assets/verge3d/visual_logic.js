/**
 * Generated by Verge3D Puzzles v.3.9.0
 * Thu Mar 17 2022 10:17:38 GMT+0000 (Greenwich Mean Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["WireFrame"] = WireFrame;
this.procedures["ResetMaterials"] = ResetMaterials;
this.procedures["UpdateModels"] = UpdateModels;
this.procedures["getCanMaterial"] = getCanMaterial;
this.procedures["getCupLiquidMaterial"] = getCupLiquidMaterial;
this.procedures["getCupMaterial"] = getCupMaterial;
this.procedures["UpdateDisplay"] = UpdateDisplay;

var PROC = {
    "WireFrame": WireFrame,
    "ResetMaterials": ResetMaterials,
    "UpdateModels": UpdateModels,
    "getCanMaterial": getCanMaterial,
    "getCupLiquidMaterial": getCupLiquidMaterial,
    "getCupMaterial": getCupMaterial,
    "UpdateDisplay": UpdateDisplay,
};

var title, brand, wireframe, CansActive, BottlesActive, CupsActive;


// getUrlData puzzle
function getUrlData(kind, isParent) {

    var targetWindow = isParent ? window.parent : window;
    switch (kind) {
    case 'URL':
        return targetWindow.location.href;
    case 'PARAMS':
        return v3d.AppUtils.getPageParams(targetWindow);
    case 'HOSTNAME':
        return targetWindow.location.hostname;
    default:
        console.error('getUrlData: option does not exists.');
        return '';
    }

}



// setMaterialWireframe puzzle
function setMaterialWireframe(matName, doWhat) {

    var matNames = Array.isArray(matName) ? matName : [matName];
    var mats = [];

    matNames.forEach(function(name) {
        mats = mats.concat(v3d.SceneUtils.getMaterialsByName(appInstance, name));
    });

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];
        mat.wireframe = doWhat == 'ENABLE' ? true : false;
    }
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}



// getEventProperty puzzle
function getEventProperty(prop, event) {
    if (typeof event != "undefined") {
        switch (prop) {
            case 'target.checked':
                return event.target.checked;
            case 'target.id':
                return event.target.id;
            case 'target.value':
                return event.target.value;
            case 'touches.length':
                return event.touches ? event.touches.length : 0;
            case 'touches[0].pageX':
                return event.touches[0].pageX;
            case 'touches[0].pageY':
                return event.touches[0].pageY;
            case 'touches[1].pageX':
                return event.touches[1].pageX;
            case 'touches[1].pageY':
                return event.touches[1].pageY;
            default:
                return event[prop];
        }
    }
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




/**
 * Obtain a unique name from the given one. Names are tested with the given
 * callback function that should return a boolean "unique" flag. If the given
 * "name" is not considered unique, then "name2" is tested for uniqueness, then
 * "name3" and so on...
 */
function acquireUniqueName(name, isUniqueCb) {
    var uniqueName = name;

    if (isUniqueCb !== undefined) {
        while (!isUniqueCb(uniqueName)) {
            var r = uniqueName.match(/^(.*?)(\d+)$/);
            if (!r) {
                uniqueName += "2";
            } else {
                uniqueName = r[1] + (parseInt(r[2], 10) + 1);
            }
        }
    }

    return uniqueName;
}



/**
 * Check if the given material name is already used by materials on the scene.
 */
function matNameUsed(name) {
    return v3d.SceneUtils.getMaterialByName(appInstance, name) !== null;
}



// assignMaterial puzzle
function assignMat(objSelector, matName) {
    var objNames = retrieveObjectNames(objSelector);
    if (!matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj) {
            var firstSubmesh = obj.resolveMultiMaterial()[0];

            var influences = firstSubmesh.morphTargetInfluences;
            var hasMorphing = influences !== undefined && influences.length > 0;

            if (hasMorphing) {
                var newMat = mat.clone();
                newMat.name = acquireUniqueName(mat.name, function(name) {
                    return !matNameUsed(name);
                });

                if (hasMorphing) {
                    newMat.morphTargets = true;
                    if (firstSubmesh.geometry.morphAttributes.normal !== undefined) {
                        newMat.morphNormals = true;
                    }
                }

                firstSubmesh.material = newMat;
            } else {
                firstSubmesh.material = mat;
            }
        }
    }
}


// Wireframe Mode
function WireFrame() {
  if (wireframe == false) {
    wireframe = true;
    assignMat('Can', 'Wireframe');
    assignMat('Cup', 'Wireframe');
    assignMat('Cup_Liquid', 'Wireframe');
    assignMat('Coke_Bottle', 'Wireframe');
    assignMat('Sprite_Bottle', 'Wireframe');
    assignMat('Pepper_Bottle', 'Wireframe');
    assignMat('Fanta_Bottle', 'Wireframe');
    assignMat('Coke_Liquid', 'Wireframe');
    assignMat('Sprite_Liquid', 'Wireframe');
    assignMat('Pepper_Liquid', 'Wireframe');
    assignMat('Fanta_Liquid', 'Wireframe');
    assignMat('Coke_Bottle_Lid', 'Wireframe');
    assignMat('Sprite_Bottle_Lid', 'Wireframe');
    assignMat('Pepper_Bottle_Lid', 'Wireframe');
    assignMat('Fanta_Bottle_Lid', 'Wireframe');
    assignMat('Coke_Bottle_Label', 'Wireframe');
    assignMat('Sprite_Bottle_Label', 'Wireframe');
    assignMat('Pepper_Bottle_Label', 'Wireframe');
    assignMat('Fanta_Bottle_Label', 'Wireframe');
  } else {
    UpdateDisplay();
  }
}

// Describe this function...
function ResetMaterials() {
  assignMat('Can', getCanMaterial());
  assignMat('Cup', getCupMaterial());
  assignMat('Cup_Liquid', getCupLiquidMaterial());
  assignMat('Coke_Bottle', 'Coke_Bottle_Material');
  assignMat('Sprite_Bottle', 'Sprite_Bottle_Material');
  assignMat('Pepper_Bottle', 'Pepper_Bottle_Material');
  assignMat('Fanta_Bottle', 'Fanta_Bottle_Material');
  assignMat('Coke_Liquid', 'Coke_Liquid_Material');
  assignMat('Sprite_Liquid', 'Sprite_Liquid_Material');
  assignMat('Pepper_Liquid', 'Pepper_Liquid_Material');
  assignMat('Fanta_Liquid', 'Fanta_Liquid_Material');
  assignMat('Coke_Bottle_Label', 'Coke_Label_Material');
  assignMat('Sprite_Bottle_Label', 'Sprite_Label_Material');
  assignMat('Pepper_Bottle_Label', 'Pepper_Label_Material');
  assignMat('Fanta_Bottle_Label', 'Fanta_Label_Material');
  assignMat('Coke_Bottle_Lid', 'Coke_Lid_Material');
  assignMat('Sprite_Bottle_Lid', 'Sprite_Lid_Material');
  assignMat('Pepper_Bottle_Lid', 'Pepper_Lid_Material');
  assignMat('Fanta_Bottle_Lid', 'Fanta_Lid_Material');
}


// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}


// Describe this function...
function UpdateModels() {
  if (BottlesActive == true) {
    if (brand == 0) {
      changeVis(['GROUP', 'Coke_Bottle'], true);
      changeVis(['GROUP', 'Sprite_Bottle'], false);
      changeVis(['GROUP', 'Pepper_Bottle'], false);
      changeVis(['GROUP', 'Fanta_Bottle'], false);
    }
    if (brand == 1) {
      changeVis(['GROUP', 'Sprite_Bottle'], true);
      changeVis(['GROUP', 'Coke_Bottle'], false);
      changeVis(['GROUP', 'Pepper_Bottle'], false);
      changeVis(['GROUP', 'Fanta_Bottle'], false);
    }
    if (brand == 2) {
      changeVis(['GROUP', 'Pepper_Bottle'], true);
      changeVis(['GROUP', 'Coke_Bottle'], false);
      changeVis(['GROUP', 'Sprite_Bottle'], false);
      changeVis(['GROUP', 'Fanta_Bottle'], false);
    }
    if (brand == 3) {
      changeVis(['GROUP', 'Fanta_Bottle'], true);
      changeVis(['GROUP', 'Coke_Bottle'], false);
      changeVis(['GROUP', 'Sprite_Bottle'], false);
      changeVis(['GROUP', 'Pepper_Bottle'], false);
    }
  } else {
    changeVis(['GROUP', 'Coke_Bottle'], false);
    changeVis(['GROUP', 'Sprite_Bottle'], false);
    changeVis(['GROUP', 'Pepper_Bottle'], false);
    changeVis(['GROUP', 'Fanta_Bottle'], false);
  }
  if (CansActive == true) {
    changeVis(['GROUP', 'Can'], true);
  } else {
    changeVis(['GROUP', 'Can'], false);
  }
  if (CupsActive == true) {
    changeVis(['GROUP', 'Cup'], true);
  } else {
    changeVis(['GROUP', 'Cup'], false);
  }
}

// Describe this function...
function getCanMaterial() {
  if (brand == 0) {
    return 'Coke_Material';
  }
  if (brand == 1) {
    return 'Sprite_Material';
  }
  if (brand == 2) {
    return 'Pepper_Material';
  }
  if (brand == 3) {
    return 'Fanta_Material';
  }
}

// Describe this function...
function getCupLiquidMaterial() {
  if (brand == 0) {
    return 'Coke_Liquid_Material';
  }
  if (brand == 1) {
    return 'Sprite_Liquid_Material';
  }
  if (brand == 2) {
    return 'Pepper_Liquid_Material';
  }
  if (brand == 3) {
    return 'Fanta_Liquid_Material';
  }
}

// Describe this function...
function getCupMaterial() {
  if (brand == 0) {
    return 'Coke_Cup_Material';
  }
  if (brand == 1) {
    return 'Sprite_Cup_Material';
  }
  if (brand == 2) {
    return 'Pepper_Cup_Material';
  }
  if (brand == 3) {
    return 'Fanta_Cup_Material';
  }
}

// Describe this function...
function UpdateDisplay() {
  wireframe = false;
  ResetMaterials();
  UpdateModels();
}


title = getUrlData('URL', true).slice(getUrlData('URL', true).lastIndexOf('/') + 1, ((getUrlData('URL', true).lastIndexOf('.') - 1) + 1));
console.log(title);
setMaterialWireframe('Wireframe', 'ENABLE');
CansActive = true;
BottlesActive = false;
CupsActive = false;
wireframe = false;
brand = 0;
if (title == 'coke_preview') {
  brand = 0;
  UpdateDisplay();
}
if (title == 'sprite_preview') {
  brand = 1;
  UpdateDisplay();
}
if (title == 'pepper_preview') {
  brand = 2;
  UpdateDisplay();
}
if (title == 'fanta_preview') {
  brand = 3;
  UpdateDisplay();
}
UpdateDisplay();

eventHTMLElem('click', 'verge_coke_button', true, function(event) {
  brand = 0;
  UpdateDisplay();
});
eventHTMLElem('click', 'verge_sprite_button', true, function(event) {
  brand = 1;
  UpdateDisplay();
});
eventHTMLElem('click', 'verge_pepper_button', true, function(event) {
  brand = 2;
  UpdateDisplay();
});
eventHTMLElem('click', 'verge_fanta_button', true, function(event) {
  brand = 3;
  UpdateDisplay();
});
eventHTMLElem('keyup', ['DOCUMENT'], true, function(event) {
  if (getEventProperty('key', event) == 'm') {
    WireFrame();
  }
});
eventHTMLElem('click', 'verge_wire_button', true, function(event) {
  WireFrame();
});
eventHTMLElem('click', 'verge_spin_button', true, function(event) {

  operateAnimation('PLAY', 'Can', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'Coke_Bottle', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'Cup', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'Fanta_Bottle', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'Pepper_Bottle', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'Sprite_Bottle', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);

      });
eventHTMLElem('click', 'verge_can_button', true, function(event) {
  CansActive = true;
  BottlesActive = false;
  CupsActive = false;
  UpdateDisplay();
});
eventHTMLElem('click', 'verge_bottle_button', true, function(event) {
  CansActive = false;
  BottlesActive = true;
  CupsActive = false;
  UpdateDisplay();
});
eventHTMLElem('click', 'verge_cup_button', true, function(event) {
  CansActive = false;
  BottlesActive = false;
  CupsActive = true;
  UpdateDisplay();
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
